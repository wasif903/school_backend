// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model AdminSchema {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  phone    String
  password String
  picture  String   @default("https://res.cloudinary.com/dhuhpslek/image/upload/fl_preserve_transparency/v1712595866/profile_demo_image_g57r6t.jpg?_s=public-apps")
  class    Branch[]
}

model Branch {
  id           Int           @id @default(autoincrement())
  name         String
  address      String
  adminId      Int
  admin        AdminSchema   @relation(fields: [adminId], references: [id])
  classes      Class[]
  feeStructure FeeStructure?

  @@unique([name, address])
  Parent Parent[]
}

model Class {
  id          Int       @id @default(autoincrement())
  classNumber Int       @unique
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id])
  grades      Grade[]
  students    Student[]
}

model Grade {
  id              Int    @id @default(autoincrement())
  gradeLetter     String
  studentCapacity Int
  classId         Int
  class           Class  @relation(fields: [classId], references: [id])

  @@unique([gradeLetter, classId])
}

model Parent {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  phone    String
  students Student[]
  branchId Int
  branch Branch @relation(fields: [branchId], references: [id])
}

model Student {
  id       Int       @id @default(autoincrement())
  name     String
  age      Int
  parentId Int
  parent   Parent    @relation(fields: [parentId], references: [id])
  classId  Int
  class    Class     @relation(fields: [classId], references: [id])
  payments Payment[]

  FeePayment FeePayment[]
}

model FeeStructure {
  id       Int      @id @default(autoincrement())
  amount   Float
  dueDate  DateTime
  branchId Int      @unique
  branch   Branch   @relation(fields: [branchId], references: [id])

  Payment Payment[]

  FeePayment FeePayment[]
}

model Payment {
  id             Int           @id @default(autoincrement())
  month          DateTime
  amount         Float
  status         PaymentStatus
  studentId      Int
  student        Student       @relation(fields: [studentId], references: [id])
  feeStructureId Int
  feeStructure   FeeStructure  @relation(fields: [feeStructureId], references: [id])

  @@unique([month, studentId]) // Ensures one payment record per student per month
}


model FeePayment {
  id            Int         @id @default(autoincrement())
  student       Student     @relation(fields: [studentId], references: [id])
  studentId     Int
  feeStructure  FeeStructure @relation(fields: [feeStructureId], references: [id])
  feeStructureId Int
  month         String      // e.g., "January", "February"
  year          Int         // e.g., 2024
  isPaid        Boolean     @default(false)
  paidAt        DateTime?   // Records the date of payment
  
  @@unique([studentId, month, year]) // Ensures one payment per student per month/year
}


enum PaymentStatus {
  PAID
  UNPAID
  PARTIAL
}
