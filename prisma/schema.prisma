// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model AdminSchema {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  phone    String
  password String
  picture  String   @default("https://res.cloudinary.com/dhuhpslek/image/upload/fl_preserve_transparency/v1712595866/profile_demo_image_g57r6t.jpg?_s=public-apps")
  class    Branch[]
  // Roles    Roles[]
}

model Roles {
  id       Int         @id @default(autoincrement())
  roleName String
  username String
  password String
  adminId  Int
  // admin    AdminSchema @relation(fields: [adminId], references: [id])

  branchId   Int
  // branch     Branch       @relation(fields: [branchId], references: [id])
  // Permission Permission[] @relation("RolePermissions")
}

model Permission {
  id    Int     @id @default(autoincrement())
  name  String
  // roles Roles[] @relation("RolePermissions")
}

model Branch {
  id      Int         @id @default(autoincrement())
  name    String
  address String
  adminId Int
  admin   AdminSchema @relation(fields: [adminId], references: [id])
  classes Class[]
  Parent  Parent[]
  // Roles   Roles[]

  @@unique([name, address])
}

model Class {
  id        Int       @id @default(autoincrement())
  className String    @unique
  branchId  Int
  branch    Branch    @relation(fields: [branchId], references: [id])
  grades    Grade[]
  students  Student[]
}

model Grade {
  id              Int       @id @default(autoincrement())
  gradeLetter     String
  studentCapacity Int
  classId         Int
  class           Class     @relation(fields: [classId], references: [id])
  Student         Student[]

  @@unique([gradeLetter, classId])
}

model Parent {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  cnic         String
  occupation   String
  companyName  String
  salary       Int
  email        String    @unique
  phone        String
  houseNumber  String
  buildingName String
  area         String
  block        String
  city         String
  picture      String?
  students     Student[]
  branchId     Int
  branch       Branch    @relation(fields: [branchId], references: [id])
}

model Student {
  id                  Int        @id @default(autoincrement())
  firstName           String
  lastName            String
  prevClass           String?
  prevSchool          String?
  age                 Int
  dob                 String
  gender              String
  parentId            Int
  parent              Parent     @relation(fields: [parentId], references: [id])
  classId             Int
  class               Class      @relation(fields: [classId], references: [id])
  gradeId             Int
  grade               Grade      @relation(fields: [gradeId], references: [id])
  noOfSibling         Int
  hasSiblingsEnrolled Boolean    @default(false)
  FeeCard             FeeCard[]
  picture             String?
  Documents           Document[]
}

model Document {
  id        Int     @id @default(autoincrement())
  studentId Int
  student   Student @relation(fields: [studentId], references: [id])
  fileUrl   String // URL of the uploaded file
}

model FeeCard {
  id        Int       @id @default(autoincrement())
  studentId Int
  student   Student   @relation(fields: [studentId], references: [id])
  items     FeeItem[]
}

enum PaymentType {
  ONE_TIME
  RECURRING
}

model FeeItem {
  id          Int     @id @default(autoincrement())
  feeType     String
  amount      Int
  feeCardId   Int
  paymentType String
  dueDate     String
  feeCard     FeeCard @relation(fields: [feeCardId], references: [id])
}