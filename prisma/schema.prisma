generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model AdminSchema {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  phone    String
  picture  String   @default("https://res.cloudinary.com/dhuhpslek/image/upload/fl_preserve_transparency/v1712595866/profile_demo_image_g57r6t.jpg?_s=public-apps")
  password String
  class    Branch[]
}

model Roles {
  id       Int    @id @default(autoincrement())
  roleName String
  username String
  password String
  adminId  Int
  branchId Int
}

model Permission {
  id   Int    @id @default(autoincrement())
  name String
}

model Branch {
  id      Int         @id @default(autoincrement())
  name    String
  address String
  adminId Int
  admin   AdminSchema @relation(fields: [adminId], references: [id])
  classes Class[]
  Parent  Parent[]

  @@unique([name, address])
  @@index([adminId], map: "Branch_adminId_fkey")
}

model Class {
  id        Int       @id @default(autoincrement())
  branchId  Int
  className String    @unique
  branch    Branch    @relation(fields: [branchId], references: [id])
  grades    Grade[]
  students  Student[]

  @@index([branchId], map: "Class_branchId_fkey")
}

model Grade {
  id              Int       @id @default(autoincrement())
  gradeLetter     String
  studentCapacity Int
  classId         Int
  class           Class     @relation(fields: [classId], references: [id])
  Student         Student[]

  @@unique([gradeLetter, classId])
  @@index([classId], map: "Grade_classId_fkey")
}

model Parent {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  phone        String
  branchId     Int
  area         String
  block        String
  buildingName String
  city         String
  cnic         String
  companyName  String
  firstName    String
  houseNumber  String
  lastName     String
  occupation   String
  salary       Int
  picture      String?
  branch       Branch    @relation(fields: [branchId], references: [id])
  students     Student[]

  @@index([branchId], map: "Parent_branchId_fkey")
}

model Student {
  id                  Int        @id @default(autoincrement())
  age                 Int
  parentId            Int
  classId             Int
  dob                 String
  firstName           String
  gender              String
  hasSiblingsEnrolled Boolean    @default(false)
  lastName            String
  noOfSibling         Int
  prevClass           String?
  prevSchool          String?
  gradeId             Int
  picture             String?
  Documents           Document[]
  FeeCard             FeeCard[]
  class               Class      @relation(fields: [classId], references: [id])
  grade               Grade      @relation(fields: [gradeId], references: [id])
  parent              Parent     @relation(fields: [parentId], references: [id])

  @@index([classId], map: "Student_classId_fkey")
  @@index([gradeId], map: "Student_gradeId_fkey")
  @@index([parentId], map: "Student_parentId_fkey")
}

model Document {
  id        Int     @id @default(autoincrement())
  studentId Int
  fileUrl   String
  student   Student @relation(fields: [studentId], references: [id])

  @@index([studentId], map: "Document_studentId_fkey")
}

model FeeCard {
  id        Int       @id @default(autoincrement())
  studentId Int
  student   Student   @relation(fields: [studentId], references: [id])
  items     FeeItem[]

  @@index([studentId], map: "FeeCard_studentId_fkey")
}

model FeeItem {
  id          Int     @id @default(autoincrement())
  feeType     String
  amount      Int
  feeCardId   Int
  dueDate     String
  paymentType String
  feeCard     FeeCard @relation(fields: [feeCardId], references: [id])

  @@index([feeCardId], map: "FeeItem_feeCardId_fkey")
}
